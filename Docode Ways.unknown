# Aim:
 To determine the total number of ways a given numeric string can be decoded into letters using the mapping "1" → 'A', "2" → 'B', ..., "26" → 'Z'.

# Objectives:
Decode Possible Combinations: Count the number of valid ways to decode the numeric string.
Use Dynamic Programming: Implement an efficient DP approach to avoid redundant computations and achieve O(n) time complexity.
Avoid Invalid Decodings: Ensure that "0" is handled correctly (e.g., "06" is not valid, but "10" and "20" are).

# code:
class Solution {
public:
    int numDecodings(string s) {
        if (s[0] == '0') {
            return 0;
        }
        int n = s.length();
        vector<int> dp(n + 1, 0);
        dp[0] = dp[1] = 1;

        for (int i = 2; i <= n; i++) {
            int one = s[i - 1] - '0';
            int two = stoi(s.substr(i - 2, 2));

            if (1 <= one && one <= 9) {
                dp[i] += dp[i - 1];
            }
            if (10 <= two && two <= 26) {
                dp[i] += dp[i - 2];
            }
        }

        return dp[n];        
    }
};
